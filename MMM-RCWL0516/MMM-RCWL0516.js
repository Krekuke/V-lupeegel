// Importige vajalikud moodulid
const NodeHelper = require("node_helper");
const { spawn, exec } = require("child_process");

let timeoutHandle = null; // Muutuja ajutise taimeri hoidmiseks

module.exports = NodeHelper.create({
    // Mooduli k√§ivitamisel kutsutakse √ºles liikumisanduri t√∂√∂tlemise funktsioon
    start: function () {
        console.log("Starting node helper for MMM-RCWL0516");
        this.runMotionSensor(); // K√§ivitab liikumisanduri kontrollimise
    },

    // Funktsioon, mis k√§ivitab Python skripti, mis kontrollib liikumist
    runMotionSensor: function () {
        // K√§ivitame Python skripti (rcwl-0516.py) liikumisanduri lugemiseks
        const process = spawn("python3", [__dirname + "/rcwl-0516.py"]);

        // Kui Python skript v√§ljastab andmeid, siis t√∂√∂tleme neid
        process.stdout.on("data", (data) => {
            const message = data.toString().trim();
            
            // Kui tuvastatakse liikumine, l√ºlitame ekraani sisse
            if (message === "MOTION_DETECTED") {
                console.log("üö∂ Liikumine tuvastatud! Ekraan sisse.");
                this.toggleDisplay(true); // Ekraani sisse l√ºlitamine
            } 
            // Kui liikumist pole, l√ºlitame ekraani v√§lja
            else if (message === "NO_MOTION") {
                console.log("üí§ Liikumist pole. Ekraan v√§lja.");
                this.toggleDisplay(false); // Ekraani v√§lja l√ºlitamine
            }
        });

        // Kui Python skript v√§ljastab vea, logime selle
        process.stderr.on("data", (data) => {
            console.error(`Error: ${data}`);
        });

        // Kui Python skript l√µppeb, logime selle l√µppemise koodi
        process.on("close", (code) => {
            console.log(`Python script exited with code ${code}`);
        });
    },

    // Funktsioon, mis kuulab saabunud s√µnumeid ja m√§√§rab konfigureerimisandmed
    notificationReceived: function (notification, payload, sender) {
        if (notification === "DOM_OBJECTS_CREATED") {
            this.sendSocketNotification("SET_CONFIG", this.config); // Saadab konfigureerimise andmed
        }
    },

    // Funktsioon ekraani sissel√ºlitamiseks ja v√§ljal√ºlitamiseks
    toggleDisplay: function (powerOn) {
        // Kui liikumine tuvastati, l√ºlitame ekraani sisse
        // Kui liikumist pole, l√ºlitame ekraani v√§lja
        const cmd = powerOn 
            ? "sudo /usr/bin/wlr-randr --output HDMI-A-1 --on" 
            : "wlr-randr --output HDMI-A-1 --off"; // Ekraani l√ºlitamise k√§sk

        // K√§ivitame s√ºsteemik√§su, et ekraani sisse v√µi v√§lja l√ºlitada
        exec(cmd, (error, stdout, stderr) => {
            console.log(`‚ö° K√§sk k√§ivitub: ${cmd}`);
            
            // Kui k√§sk l√µpeb veaga, logime vea
            if (error) {
                console.error(`Exec viga: ${error.message}`);
                return;
            }
            // Kui k√§sk v√§ljastab vigu, logime need
            if (stderr) {
                console.error(`Exec stderr: ${stderr}`);
                return;
            }
            // Kui k√§sk √µnnestub, logime s√ºsteemi v√§ljundi
            console.log(`Exec v√§ljund: ${stdout}`);
        });
    }
});
